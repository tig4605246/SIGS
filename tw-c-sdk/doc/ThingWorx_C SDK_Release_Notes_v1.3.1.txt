ThingWorx Edge C SDK ReleaseNotes 

The following sections list and describe the new features and the issues fixed in the releases of the ThingWorx Edge C SDK in chronological order, from the current release to the oldest release. 

C SDK Version 1.3.1 

Issues Fixed  
ID                      APPLIES TO                  DESCRIPTION  
EDGE-842                C SDK only                  The Steam Sensor with OpenSSL example for Linux that is provided in the zip archive for the C SDK did not work without changes to the Makefile. The OpenSSL libraries are now included in the distributed zip archive. The example should now compile "out of the box" from the distributed zip archive. If you have your own OpenSSL libraries, you can build against them as well.  

EDGE-834                All SDKs and WS EMS         Pending requests to the ThingWorx Platform would time out if the edge device received a request from the Platform while it waited for the response. Workaround: Increasing the message timeout from the default value of 10 seconds to 60 seconds and changing the port configuration resolves this issue.  

EDGE-829                C SDK, .NET SDK, WS EMS     The ListFiles service gives different result for WS EMS 5.3 and 5.0. The ListFiles service in this release (5.3.1) now returns the path without the file name, as it did in release 5.0.  

EDGE-827                C SDK                      The Tunnel Manager was using “==” to compare strings. This release resolves this issue.  

EDGE-823 Case 12819599  C SDK, WS EMS              The WS EMS running as a service on a Netbiter ec350 device failed to start up and displayed the following message: Error creating BSD socket. This release resolves this issue.  

EDGE-683                All SDKs and WS EMS        An ADO application could not connect to the ThingWorx Platform through an NTLM proxy server. This issue is fixed in this release. Tunneling through an NTLM proxy server is working.  



C SDK, version 1.3.0
New Features and Issues Fixed 
• To prevent collisions of filenames,the name of the header file, list.h, has changed to twList.h. Code that directly references list.h must be updated to include twList.h instead. Note that twList.h is automatically included when an application includes twApi.h. 

• Functions that write values to properties now accept input in various formats,including the _content_ format required by the EMS. 

• An incomplete check for the OS type in AxTLS no longer causes the iOS build to fail. 

• The JSON returned by twInfoTables_ToJson() now includes the data shape key,instead of just the contents of the object. 

• The example application, SteamSensorWithFileTransfer, no longer crashes. 

• If compiling on OSX,the PATH_MAX and other OSX definitions are now included in the build. 

• Memory leaks no longer occur during file transfers. 

• The handling of timeouts for file transfers has been improved. 

• The creation of a staging directory for file transfers is now supported properly. 

• Transfers are now allowed for things that use identifiers. 

• The error handling for the SubscribedPropertiesManager has been improved. 

• You can now configure the maximum thread count for message handling in the dll wrapper for win32 (twApiWrapper). 

• The default value for the socket read timeout in twDefaultSettings.h is now 100ms. 

• To improve the stability of connections, the amount of time that the websocket client waits for frame data of the websocket has been increased. 

• The order of preference for proxy authentication types is now as follows:Digest,Basic,NTLM. 

• During a call to delete a file, the SDK now checks to see if the file is open before attempting to delete it. 

• The script resource no longer prepends the *charactertothe p_data fileforan identifier. 

• The GetDirectoryStructure callback now cleans up twFile struct on each iteration through the directories. 

• To fix the ability to connect through reverse proxies, the twSocket_Waitfor call in twTlsClient_Read has been removed. 

• Tunnels can now be established through reverse proxies. 

• A case-sensitive comparison of header values caused the error, InvalidConnectionHeader. This issue is fixed in this release. 



C SDK Version 1.2.0 
New Features  
• Added support for subscribed properties. 
• Added support for aspects on service definitions. 
• Added functions for setting both the gateway name and the gateway type to the twWs struct. 
• Updated developer guide. 
• Added capability to clear proxy settings. 
• Removed dependency on Joyent HTTP parser. 
• SDK now has dependency on cJSON library (included in distribution). 
• Changed default socket read timeout to 500ms.  

Bug Fixes  
The following issues are resolved in this release: 
• The NoTls option will not compile on the C SDK. 
• All bound things were registering with the same thing name. 
• GetDirectoryStructure was not including a leading / character on paths. 
• GetDirectoryStructure was not including virtual directory names as root directories in the result. 
• Fixed deadlock in multi part message init. 
• Timeout specified in twcfg.socket_read_timeoutis now passed into the socket read call. 
• Socket read timeouts no longer disconnect websocket.  

C SDK Version 1.1.2 

New Features  
• API reference documentation now included in both the header files and as html in the doc/htmldirectory. 
• New, updated developer guide. 
• Added support for registering events in the C SDK. Events can be browsed from the Platform. 
• Fix for occasional 'selecting on socket' error reported in logs. 
• OSX Makefile fixes.  


C SDK Version 1.1.1 
New Features  
• Added ability to change offline message store directory using twApi_SetOfflineMsgStoreDir. 
• Compile time settings are now readable in the twcfg structure. 
• Added OSX build files back into distribution. 
• Added GetDirectoryStructure service. This change is for backward compatibility only and is deprecated. 
• Added a SteamSensorWithMinimalFootprint example. 
• Modified SteamSensorWithMinimalFootprint to be single threaded. 
• Changed Linux build of SteamSensor to have logging enabled.  

Bug Fixes  
• Fixed the incoming message handling that occurs within the sendMessageBlocking function to handle responses only. Avoids deadlocks in certain situations. 
• Changed twMessage_Send to check to see if we are authenticated before we send. 
• Changed code that sends offline messages to insert a new RequestId to remove any potential conflicts from a previous ID. 
• Added Mutex protection in twTlsClient_Reconnect and twTlsClient_ConnectSession. 
• Fixed segfault that occurs during non-persistent offline message storing. 
• Updated copyright in documentation. 
• Added registration of Location property so that it shows up when browsed.  



C SDK Version 1.1.0
New Features  
• Support for transferring files and directories that have multi-byte characters in their names. 
• Support for browsing directories and files that have multi-byte characters in their names. 
• Support for tunneling. 
• Support for NTLM proxy servers. 
• Addition of a TLS wrapper to support OpenSSL/FIPS. 
• Portable multi-threading layer (use is optional). 
• SHA-256 certificate signature support. 
• Full certificate validation. 
• Run-time overriding of default values. 
• Wildcard property and service callback registration. 
• Authentication event callbacks. 
• Bind event callbacks.  

Bug Fixes  
• EDGE-318: C SDK disconnects. 
• EDGE-291: Segfault on service call with empty input 
• EDGE-221: C SDK continues to try to reconnect after number of retries is exhausted. 
• EDGE-189: C SDK not checking for ping timeouts after sending a ping. 
• EDGE-188: Cannot correctly import services from the C SDK to the Platform. 
• EDGE-169: C SDK does not reconnect after entire server shutdown. 
• CreateBinaryFile will now open/write/close if it is called without StartFileTransfer being called previously. 
• Fixed file transfer to support both 5.0 and later servers.  




